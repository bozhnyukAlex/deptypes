\import Data.List
\import Function (o)
\import Function.Meta
\import Logic
\import Paths
\import hw07 (In, contrProp)
\import lect05
\import lect12 \hiding (Int', pos, neg)

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0

\func negPred (x : Int) : Int \elim x
  | pos (suc n) => pos (suc n)
  | neg n => neg (suc n)
  | 0 => neg 1

-- 2. Определите функции сложения и умножения для Int

\func \infixl 6 + (x y : Int) : Int \with
  | pos n, pos m => n Nat.+ m
  | pos n, neg (suc m) => n Nat.- suc m
  | neg (suc n), pos m => m Nat.- suc n
  | neg (suc n), neg (suc m) => neg (suc n Nat.+ suc m)

\func \infixl 7 * (x y : Int) : Int \with
  | pos n, pos m => n Nat.* m
  | pos n, neg (suc m) => neg (n Nat.* suc m)
  | neg (suc n), pos m => neg (m Nat.* suc n)
  | neg (suc n), neg (suc m) => suc n Nat.* suc m

-- 3. Определите тип данных BinNat для бинарных натуральных чисел
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1
--    Такой тип данных содержит несколько различных представлений для нуля
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули

\data BinNat : \Set
  | zero
  | even BinNat \with {
    | zero => zero
  }
  | odd BinNat

-- 4. Докажите, что функция pred сюръективна

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => inP (suc b, idp)

-- 5. Докажите, что функция suc не сюръективна

\func suc-is-not-sur (p : isSur suc) : Empty => \case p 0 \with {
  | inP (a, ())
}

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции
--    Докажите, что если f и g сюръективны, то g o f также сюръективна
--    Докажите, что если g o f сюръективна, то g также сюръективна

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g o f) =>
  \lam r => \case q r \with {
    | inP (b, y) => \case p b \with {
      | inP (a, x) => inP (a, pmap g x *> y)
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g o f)) : isSur g =>
  \lam z => \case p z \with {
    | inP (x, a) => inP (f x, a)
  }

-- 7. Определите множество конечных подмножеств множества A,
--    то есть списков элементов A с точностью до перестановок и повторений элементов

\func Set (A : \Set) : \Set =>
  Quotient (List A) (\lam xs ys => \Pi (x : A) -> (TruncP $ In x xs) <-> (TruncP $ In x ys))

-- 8. Докажите теорему Кантора

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A"

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f) => (=, =-isInj)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty => \case p unach-set \with {
  | inP (a, q) =>
    \let g => pmap (__ a) q
    \in contrProp {unach-set a}
        (\lam u =>
            \let | a-in-fa => coe0 (inv g) u
                 | notfaa : Not $ f a a => u \in \lam _ => notfaa a-in-fa)
        (\lam n a-in-self => n $ coe0 g a-in-self)
}
  \where {
    \func unach-set => \lam a => Not (f a a)
  }


-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
